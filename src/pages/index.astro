---
import Layout from '@/layouts/Layout.astro';
import Header from '@/components/Header.astro';
import TeamCard from '@/components/TeamCard.astro';
import StandingsTable from '@/components/StandingsTable.astro';
import CombinedStandingsTable from '@/components/CombinedStandingsTable.astro';
import BanPickDisplay from '@/components/BanPickDisplay.astro';
import MVPDisplay from '@/components/MVPDisplay.astro';
import MatchLineup from '@/components/MatchLineup.astro';
import Footer from '@/components/Footer.astro';
import TranslationProvider from '@/components/TranslationProvider.astro';

import { 
  detectLanguageFromPath,
  loadTranslations,
  createTranslationFunction,
  getLocalizedMeta
} from '@/utils/i18n';

import type {
  TeamsData,
  MatchesData,
  Team,
  TeamRecord,
  StandingsEntry
} from '@/types';

import type { MatchResultEntry } from '@/utils/matchDataTransform';
import { getMatchLineup, hasMatchLineup } from '@/utils/matchDataTransform';

// Import data files
import teamsDataRaw from '@/data/ltk-sbb-teams.json';
import matchesDataRaw from '@/data/ltk-sbb-matches.json';
import matchResultsRaw from '@/data/match_results.json';

// Type the imported data
const teamsData = teamsDataRaw as TeamsData;
const matchesData = matchesDataRaw as MatchesData;
const matchResults = matchResultsRaw as MatchResultEntry[];

// Extract tournament info
const tournamentInfo = teamsData.tournament_info;

// Get current language and load translations
const currentLang = Astro.locals?.lang || detectLanguageFromPath(Astro.url.pathname);
const translations = await loadTranslations(currentLang);
const t = createTranslationFunction(translations);

// Convert teams object to array for easier handling
const teams: Team[] = Object.values(teamsData.teams);

// Calculate team records from match data
function calculateTeamRecords(): Record<string, { core: TeamRecord; next: TeamRecord }> {
  const records: Record<string, { core: TeamRecord; next: TeamRecord }> = {};

  // Initialize records for all teams
  teams.forEach(team => {
    const teamKey = Object.keys(teamsData.teams).find(
      key => teamsData.teams[key].name === team.name
    );
    if (teamKey) {
      records[teamKey] = {
        core: { wins: 0, losses: 0, winRate: 0 },
        next: { wins: 0, losses: 0, winRate: 0 }
      };
    }
  });

  // Count wins and losses from match data
  matchesData.schedule.forEach(matchDay => {
    matchDay.matches.forEach(match => {
      if (match.status === 'completed' && match.result) {
        const winner = match.result.winner;
        const loser = match.team1 === winner ? match.team2 : match.team1;

        const division = match.division.toLowerCase() as 'core' | 'next';

        if (records[winner] && records[loser]) {
          records[winner][division].wins += 1;
          records[loser][division].losses += 1;
        }
      }
    });
  });

  // Calculate win rates
  Object.keys(records).forEach(teamKey => {
    ['core', 'next'].forEach(division => {
      const div = division as 'core' | 'next';
      const record = records[teamKey][div];
      const total = record.wins + record.losses;
      record.winRate = total > 0 ? record.wins / total : 0;
    });
  });

  return records;
}

const teamRecords = calculateTeamRecords();

// Get current standings from match data
const coreStandings: StandingsEntry[] = matchesData.current_standings.core;
const nextStandings: StandingsEntry[] = matchesData.current_standings.next;

// SEO meta - Enhanced for Google search visibility with i18n
const pageTitle = currentLang === 'ja' 
  ? `k4sen主催 LTK 2025 - League of Legends ストリーマー大会 | 精霊の花祭り 幽明の境`
  : `LTK 2025 - k4sen's League of Legends Streamer Tournament | Official Site`;

const pageDescription = currentLang === 'ja'
  ? `k4sen主催の本格League of Legendsストリーマー大会「LTK 2025 精霊の花祭り 幽明の境」公式情報サイト。4チーム対戦、リアルタイム順位表、詳細統計、試合結果、選手情報を掲載。ZETA DIVISION協力のesports大会。`
  : `Official site for LTK 2025 "Spirit Flower Festival - Boundary of Light and Dark", k4sen's League of Legends streamer tournament. Real-time standings, detailed statistics, match results, and player information.`;
const pageKeywords = [
  'League of Legends',
  'LoL',
  'リーグオブレジェンド',
  'k4sen',
  'か4せん',
  'LTK',
  'League The k4sen',
  'tournament',
  'トーナメント',
  'streamer',
  'ストリーマー',
  'championship',
  'チャンピオンシップ',
  'ZETA DIVISION',
  'ゼータディビジョン',
  'Riot Games',
  'ライアットゲームズ',
  '精霊の花祭り',
  '幽明の境',
  'esports',
  'eスポーツ',
  'gaming',
  'ゲーミング',
  'プロゲーマー',
  '順位表',
  'standings',
  '試合結果',
  'match results',
  'live',
  'ライブ',
  '配信',
  'stream',
  'Japan',
  '日本',
  'オンライン大会',
  'CORE',
  'NEXT',
  'MVP',
  'ban pick',
  'バン・ピック',
  'draft'
];
---

<Layout
  title={pageTitle}
  description={pageDescription}
  keywords={pageKeywords}
>
  <TranslationProvider lang={currentLang}>
    <Header />

  <main>
    <!-- Hero Section -->
    <section id="home" class="mt-20 py-16 bg-gradient-to-br from-primary to-secondary">
      <div class="max-w-6xl mx-auto px-5 grid md:grid-cols-2 gap-12 items-center">
        <div class="text-center md:text-left">
          <h1 class="text-4xl md:text-6xl font-bold text-dark mb-4 leading-tight font-display">
            {t('homepage.title')}
          </h1>
          <p class="text-xl text-dark-light mb-2 font-medium">
            {t('homepage.subtitle')}
          </p>
          <p class="text-lg text-dark mb-3 font-normal">
            {t('homepage.season')}
          </p>
          <p class="text-base text-silver font-normal">
            {t('homepage.supportedBy', { sponsor: tournamentInfo.supported_by })}
          </p>
        </div>

        <div class="flex flex-col gap-8">
          <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div class="bg-surface border border-tertiary rounded-lg p-6 text-center transition-all duration-300 hover:border-accent-light hover:shadow-sm">
              <span class="block text-4xl font-bold text-accent leading-none mb-2">{tournamentInfo.format.teams}</span>
              <span class="text-sm text-dark-light uppercase tracking-wide font-medium">{t('homepage.stats.teams')}</span>
            </div>
            <div class="bg-surface border border-tertiary rounded-lg p-6 text-center transition-all duration-300 hover:border-accent-light hover:shadow-sm">
              <span class="block text-4xl font-bold text-accent leading-none mb-2">{tournamentInfo.format.total_players}</span>
              <span class="text-sm text-dark-light uppercase tracking-wide font-medium">{t('homepage.stats.streamers')}</span>
            </div>
            <div class="bg-surface border border-tertiary rounded-lg p-6 text-center transition-all duration-300 hover:border-accent-light hover:shadow-sm">
              <span class="block text-4xl font-bold text-accent leading-none mb-2">2</span>
              <span class="text-sm text-dark-light uppercase tracking-wide font-medium">{t('homepage.stats.divisions')}</span>
            </div>
          </div>

          <div class="bg-surface border border-tertiary rounded-lg p-6 flex flex-col gap-4">
            <div class="flex flex-col gap-1">
              <span class="text-sm text-accent font-semibold uppercase tracking-wide">{t('homepage.phases.regularSeason')}</span>
              <span class="text-base text-dark font-medium">
                {new Date(tournamentInfo.regular_season.start).toLocaleDateString(currentLang === 'ja' ? 'ja-JP' : 'en-US')} -
                {new Date(tournamentInfo.regular_season.end).toLocaleDateString(currentLang === 'ja' ? 'ja-JP' : 'en-US')}
              </span>
            </div>
            <div class="flex flex-col gap-1">
              <span class="text-sm text-accent font-semibold uppercase tracking-wide">{t('homepage.phases.playoffs')}</span>
              <span class="text-base text-dark font-medium">
                {new Date(tournamentInfo.playoffs.start).toLocaleDateString(currentLang === 'ja' ? 'ja-JP' : 'en-US')} -
                {new Date(tournamentInfo.playoffs.end).toLocaleDateString(currentLang === 'ja' ? 'ja-JP' : 'en-US')}
              </span>
            </div>
            <div class="mt-3 pt-3 border-t border-tertiary">
              <a 
                href="/statistics" 
                class="inline-flex items-center gap-2 text-accent hover:text-accent-light transition-colors duration-300 font-medium text-sm"
                title="詳細な大会統計データを確認"
              >
                📊 詳細統計データを見る
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                </svg>
              </a>
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- Standings Section -->
    <section id="standings" class="py-16 bg-primary">
      <div class="max-w-6xl mx-auto px-5">
        <header class="text-center mb-12">
          <h2 class="text-3xl text-dark mb-4 relative after:absolute after:bottom-0 after:left-1/2 after:-translate-x-1/2 after:w-20 after:h-0.5 after:bg-accent after:-bottom-2">{t('standings.title')}</h2>
          <p class="text-lg text-dark-light max-w-2xl mx-auto mb-4">
            {t('standings.description')}
          </p>
          <div class="flex justify-center">
            <a 
              href="/statistics" 
              class="inline-flex items-center gap-2 px-4 py-2 bg-accent/10 border border-accent rounded-lg text-accent hover:bg-accent/20 hover:border-accent-light transition-all duration-300 font-medium"
              title="選手・チーム・チャンピオンの詳細統計を確認"
            >
              📈 詳細分析データ
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
              </svg>
            </a>
          </div>
        </header>

        <!-- Combined Standings -->
        <div class="mb-12">
          <CombinedStandingsTable 
            coreStandings={coreStandings} 
            nextStandings={nextStandings}
            matchesData={matchesData}
            title={t('standings.combined')}
          />
        </div>

        <!-- Division Standings -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
          <StandingsTable
            standings={coreStandings}
            division="CORE"
          />

          <StandingsTable
            standings={nextStandings}
            division="NEXT"
          />
        </div>
      </div>
    </section>

    <!-- Teams Section -->
    <section id="teams" class="py-16 bg-secondary">
      <div class="max-w-6xl mx-auto px-5">
        <header class="text-center mb-12">
          <h2 class="text-3xl text-dark mb-4 relative after:absolute after:bottom-0 after:left-1/2 after:-translate-x-1/2 after:w-20 after:h-0.5 after:bg-accent after:-bottom-2">{t('teams.title')}</h2>
          <p class="text-lg text-dark-light max-w-2xl mx-auto">
            {t('teams.description', { 
              totalTeams: tournamentInfo.format.teams,
              totalPlayers: tournamentInfo.format.total_players 
            })}
          </p>
        </header>

        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {teams.map((team) => {
            const teamKey = Object.keys(teamsData.teams).find(
              key => teamsData.teams[key].name === team.name
            );
            const coreRecord = teamKey ? teamRecords[teamKey]?.core : undefined;
            const nextRecord = teamKey ? teamRecords[teamKey]?.next : undefined;

            return (
              <TeamCard
                team={team}
                coreRecord={coreRecord}
                nextRecord={nextRecord}
              />
            );
          })}
        </div>
      </div>
    </section>

    <!-- Schedule Section -->
    <section id="schedule" class="py-16 bg-primary">
      <div class="max-w-6xl mx-auto px-5">
        <header class="text-center mb-12">
          <h2 class="text-3xl text-dark mb-4 relative after:absolute after:bottom-0 after:left-1/2 after:-translate-x-1/2 after:w-20 after:h-0.5 after:bg-accent after:-bottom-2">{t('schedule.title')}</h2>
          <p class="text-lg text-dark-light max-w-2xl mx-auto">
            {t('schedule.description')}
          </p>
        </header>

        <div class="flex flex-col gap-12">
          <!-- Regular Season Schedule -->
          <div class="bg-surface border border-tertiary rounded-lg p-8 shadow-sm">
            <h3 class="text-2xl text-dark mb-6 text-center pb-3 border-b border-tertiary">{t('schedule.regularSeason')}</h3>
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
              {matchesData.schedule.map((matchDay) => (
                <div class="bg-secondary border border-tertiary rounded-lg p-6 transition-all duration-300 hover:border-accent-light hover:shadow-sm">
                  <header class="text-center mb-6 pb-4 border-b border-tertiary">
                    <h4 class="text-xl text-dark mb-2 font-semibold">
                      {new Date(matchDay.date).toLocaleDateString('ja-JP', {
                        month: 'long',
                        day: 'numeric'
                      })}（{matchDay.day}）
                    </h4>
                    <span class="block text-sm text-accent font-medium mb-1">{matchDay.time}〜</span>
                    <span class="text-sm text-dark-light">{matchDay.description}</span>
                  </header>

                  <div class="flex flex-col gap-6">
                    {matchDay.matches.map((match) => (
                      <div class={`bg-surface border-l-4 rounded p-4 ${
                        match.status === 'completed' ? 'border-l-success' : 'border-l-warning'
                      }`}>
                        <div class="flex justify-between items-center mb-3">
                          <div>
                            <span class="text-xs text-accent font-semibold bg-accent/10 px-2 py-1 rounded mb-2 inline-block">{match.division}</span>

                            <div class="flex items-center gap-2 text-sm">
                              <span class="text-dark font-medium">{
                                teams.find(t => Object.keys(teamsData.teams).find(
                                  key => teamsData.teams[key].name === t.name && key === match.team1
                                ))?.name || match.team1
                              }</span>
                              <span class="text-dark-light text-xs">vs</span>
                              <span class="text-dark font-medium">{
                                teams.find(t => Object.keys(teamsData.teams).find(
                                  key => teamsData.teams[key].name === t.name && key === match.team2
                                ))?.name || match.team2
                              }</span>
                            </div>
                          </div>

                          {match.result && (
                            <div class="text-right flex flex-col gap-1">
                              <span class="text-xs text-success font-semibold">
                                勝者: {
                                  teams.find(t => Object.keys(teamsData.teams).find(
                                    key => teamsData.teams[key].name === t.name && key === match.result!.winner
                                  ))?.name || match.result.winner
                                }
                              </span>
                              <span class="text-xs text-dark-light">{match.result.score}</span>
                            </div>
                          )}

                          {match.status === 'scheduled' && (
                            <div class="text-xs text-warning font-medium">予定</div>
                          )}
                        </div>

                        {match.result?.mvp && (
                          <div class="w-full max-w-full overflow-hidden">
                            <MVPDisplay
                              mvpPlayer={match.result.mvp}
                              team1Name={teams.find(t => Object.keys(teamsData.teams).find(
                                key => teamsData.teams[key].name === t.name && key === match.team1
                              ))?.name || match.team1}
                              team2Name={teams.find(t => Object.keys(teamsData.teams).find(
                                key => teamsData.teams[key].name === t.name && key === match.team2
                              ))?.name || match.team2}
                              team1Id={match.team1}
                              winnerTeamId={match.result.winner}
                            />
                          </div>
                        )}

                        {match.result?.draft && (
                          <div class="w-full max-w-full overflow-hidden">
                            <BanPickDisplay
                              draft={match.result.draft}
                              team1Name={teams.find(t => Object.keys(teamsData.teams).find(
                                key => teamsData.teams[key].name === t.name && key === match.team1
                              ))?.name || match.team1}
                              team2Name={teams.find(t => Object.keys(teamsData.teams).find(
                                key => teamsData.teams[key].name === t.name && key === match.team2
                              ))?.name || match.team2}
                            />
                          </div>
                        )}

                        {match.status === 'completed' && hasMatchLineup(matchResults, matchDay.date, match.team1, match.team2, match.division) && (() => {
                          const lineupData = getMatchLineup(matchResults, matchDay.date, match.team1, match.team2, match.division);
                          if (lineupData) {
                            return (
                              <div class="w-full max-w-full overflow-hidden">
                                <MatchLineup
                                  team1Players={lineupData.team1Players}
                                  team2Players={lineupData.team2Players}
                                  team1Name={teams.find(t => Object.keys(teamsData.teams).find(
                                    key => teamsData.teams[key].name === t.name && key === match.team1
                                  ))?.name || match.team1}
                                  team2Name={teams.find(t => Object.keys(teamsData.teams).find(
                                    key => teamsData.teams[key].name === t.name && key === match.team2
                                  ))?.name || match.team2}
                                />
                              </div>
                            );
                          }
                          return null;
                        })()}
                      </div>
                    ))}
                  </div>
                </div>
              ))}
            </div>
          </div>

          <!-- Playoffs Schedule -->
          <div class="bg-surface border border-tertiary rounded-lg p-8 shadow-sm">
            <h3 class="text-2xl text-dark mb-6 text-center pb-3 border-b border-tertiary">プレイオフ</h3>
            <div class="text-center mb-6 flex justify-center gap-6">
              <p class="text-sm text-accent m-0">形式: {matchesData.playoffs.format}</p>
              <p class="text-sm text-accent m-0">開催: {matchesData.playoffs.location}</p>
            </div>
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {matchesData.playoffs.schedule.map((playoffDay) => (
                <div class="bg-secondary border border-tertiary rounded-lg p-4">
                  <header class="text-center mb-4 pb-2 border-b border-tertiary">
                    <h4 class="text-base text-dark mb-1">
                      {new Date(playoffDay.date).toLocaleDateString('ja-JP', {
                        month: 'long',
                        day: 'numeric'
                      })}（{playoffDay.day}）
                    </h4>
                    <span class="text-sm text-dark-light">{playoffDay.description}</span>
                  </header>

                  <div class="flex flex-col gap-3">
                    {playoffDay.matches.map((match) => (
                      <div class="bg-surface border border-tertiary rounded p-3 text-center">
                        <span class="block text-xs text-accent font-semibold mb-2">{match.round}</span>
                        <div class="text-sm text-dark">
                          <span>{match.team1}</span>
                          <span class="mx-2 text-dark-light">vs</span>
                          <span>{match.team2}</span>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    </section>
    </main>

    <Footer />
  </TranslationProvider>
</Layout>

<style>
  /* Responsive Design */
  @media (max-width: 768px) {
    .hero-content {
      @apply grid-cols-1 gap-8 text-center;
    }

    .hero-text {
      @apply text-center;
    }

    .overview-stats {
      @apply grid-cols-1 gap-3;
    }

    .teams-grid {
      @apply grid-cols-1 gap-6;
    }

    .schedule-grid {
      @apply grid-cols-1;
    }

    .standings-container {
      @apply grid-cols-1 gap-6;
    }

    .playoffs-info {
      @apply flex-col gap-2;
    }
  }

  @media (max-width: 480px) {
    .hero {
      @apply mt-20 py-8;
    }

    .hero-title {
      @apply text-2xl;
    }

    .stat-card {
      @apply p-4;
    }

    .stat-number {
      @apply text-3xl;
    }

    .tournament-dates {
      @apply p-4;
    }

    .match-teams {
      @apply flex-col gap-1 text-center;
    }

    .match-item {
      @apply flex-col items-start gap-2;
    }

    /* Fix ban-pick container overflow on very small screens */
    .schedule-grid .bg-surface {
      @apply max-w-full overflow-hidden;
    }

    .schedule-grid .bg-surface > div {
      @apply max-w-full;
    }
  }
</style>
