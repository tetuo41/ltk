---
import Layout from '@/layouts/Layout.astro';
import Header from '@/components/Header.astro';
import TeamCard from '@/components/TeamCard.astro';
import StandingsTable from '@/components/StandingsTable.astro';
import Footer from '@/components/Footer.astro';

import type { 
  TeamsData, 
  MatchesData, 
  Team, 
  TeamRecord, 
  StandingsEntry 
} from '@/types';

// Import data files
import teamsDataRaw from '@/data/teams.json';
import matchesDataRaw from '@/data/matches.json';

// Type the imported data
const teamsData = teamsDataRaw as TeamsData;
const matchesData = matchesDataRaw as MatchesData;

// Extract tournament info
const tournamentInfo = teamsData.tournament_info;

// Convert teams object to array for easier handling
const teams: Team[] = Object.values(teamsData.teams);

// Calculate team records from match data
function calculateTeamRecords(): Record<string, { core: TeamRecord; next: TeamRecord }> {
  const records: Record<string, { core: TeamRecord; next: TeamRecord }> = {};
  
  // Initialize records for all teams
  teams.forEach(team => {
    const teamKey = Object.keys(teamsData.teams).find(
      key => teamsData.teams[key].name === team.name
    );
    if (teamKey) {
      records[teamKey] = {
        core: { wins: 0, losses: 0, winRate: 0 },
        next: { wins: 0, losses: 0, winRate: 0 }
      };
    }
  });

  // Count wins and losses from match data
  matchesData.schedule.forEach(matchDay => {
    matchDay.matches.forEach(match => {
      if (match.status === 'completed' && match.result) {
        const winner = match.result.winner;
        const loser = match.team1 === winner ? match.team2 : match.team1;
        
        const division = match.division.toLowerCase() as 'core' | 'next';
        
        if (records[winner] && records[loser]) {
          records[winner][division].wins += 1;
          records[loser][division].losses += 1;
        }
      }
    });
  });

  // Calculate win rates
  Object.keys(records).forEach(teamKey => {
    ['core', 'next'].forEach(division => {
      const div = division as 'core' | 'next';
      const record = records[teamKey][div];
      const total = record.wins + record.losses;
      record.winRate = total > 0 ? record.wins / total : 0;
    });
  });

  return records;
}

const teamRecords = calculateTeamRecords();

// Get current standings from match data
const coreStandings: StandingsEntry[] = matchesData.current_standings.core;
const nextStandings: StandingsEntry[] = matchesData.current_standings.next;

// SEO meta
const pageTitle = `League The k4sen (LTK) 2025 - ${tournamentInfo.season}`;
const pageDescription = `${tournamentInfo.name} - ${tournamentInfo.season}。k4sen主催のLoLストリーマー大会。4チーム48名による熱戦をお楽しみください。`;
const pageKeywords = [
  'League of Legends',
  'k4sen', 
  'LTK',
  'tournament',
  'LoL',
  'streamer',
  'championship',
  'ZETA DIVISION',
  'Riot Games',
  '精霊の花祭り',
  '幽明の境'
];
---

<Layout 
  title={pageTitle}
  description={pageDescription}
  keywords={pageKeywords}
>
  <Header />
  
  <main>
    <!-- Hero Section -->
    <section id="home" class="hero">
      <div class="hero-content">
        <div class="hero-text">
          <h1 class="hero-title">
            League The k4sen
          </h1>
          <p class="hero-subtitle">
            League of Legends Streamer's Championship
          </p>
          <p class="hero-season">
            {tournamentInfo.season}
          </p>
          <p class="hero-support">
            Supported by {tournamentInfo.supported_by}
          </p>
        </div>
        
        <div class="tournament-overview">
          <div class="overview-stats">
            <div class="stat-card">
              <span class="stat-number">{tournamentInfo.format.teams}</span>
              <span class="stat-label">チーム</span>
            </div>
            <div class="stat-card">
              <span class="stat-number">{tournamentInfo.format.total_players}</span>
              <span class="stat-label">ストリーマー</span>
            </div>
            <div class="stat-card">
              <span class="stat-number">2</span>
              <span class="stat-label">部門</span>
            </div>
          </div>
          
          <div class="tournament-dates">
            <div class="date-info">
              <span class="date-label">レギュラーステージ</span>
              <span class="date-range">
                {new Date(tournamentInfo.regular_season.start).toLocaleDateString('ja-JP')} - 
                {new Date(tournamentInfo.regular_season.end).toLocaleDateString('ja-JP')}
              </span>
            </div>
            <div class="date-info">
              <span class="date-label">プレイオフ</span>
              <span class="date-range">
                {new Date(tournamentInfo.playoffs.start).toLocaleDateString('ja-JP')} - 
                {new Date(tournamentInfo.playoffs.end).toLocaleDateString('ja-JP')}
              </span>
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- Teams Section -->
    <section id="teams" class="teams-section">
      <div class="container">
        <header class="section-header">
          <h2 class="section-title">参加チーム</h2>
          <p class="section-description">
            4チーム、総勢{tournamentInfo.format.total_players}名のストリーマーが熱戦を繰り広げます
          </p>
        </header>
        
        <div class="teams-grid">
          {teams.map((team) => {
            const teamKey = Object.keys(teamsData.teams).find(
              key => teamsData.teams[key].name === team.name
            );
            const coreRecord = teamKey ? teamRecords[teamKey]?.core : undefined;
            const nextRecord = teamKey ? teamRecords[teamKey]?.next : undefined;
            
            return (
              <TeamCard 
                team={team} 
                coreRecord={coreRecord}
                nextRecord={nextRecord}
              />
            );
          })}
        </div>
      </div>
    </section>

    <!-- Schedule Section -->
    <section id="schedule" class="schedule-section">
      <div class="container">
        <header class="section-header">
          <h2 class="section-title">試合日程</h2>
          <p class="section-description">
            レギュラーステージとプレイオフの日程
          </p>
        </header>

        <div class="schedule-container">
          <!-- Regular Season Schedule -->
          <div class="schedule-phase">
            <h3 class="phase-title">レギュラーステージ</h3>
            <div class="schedule-grid">
              {matchesData.schedule.map((matchDay) => (
                <div class="match-day-card">
                  <header class="match-day-header">
                    <h4 class="match-date">
                      {new Date(matchDay.date).toLocaleDateString('ja-JP', { 
                        month: 'long', 
                        day: 'numeric' 
                      })}（{matchDay.day}）
                    </h4>
                    <span class="match-time">{matchDay.time}〜</span>
                    <span class="match-description">{matchDay.description}</span>
                  </header>
                  
                  <div class="matches-list">
                    {matchDay.matches.map((match) => (
                      <div class={`match-item ${match.status}`}>
                        <div class="match-info">
                          <span class="match-division">{match.division}</span>
                          
                          <div class="match-teams">
                            <span class="team">{
                              teams.find(t => Object.keys(teamsData.teams).find(
                                key => teamsData.teams[key].name === t.name && key === match.team1
                              ))?.name || match.team1
                            }</span>
                            <span class="vs">vs</span>
                            <span class="team">{
                              teams.find(t => Object.keys(teamsData.teams).find(
                                key => teamsData.teams[key].name === t.name && key === match.team2
                              ))?.name || match.team2
                            }</span>
                          </div>
                        </div>
                        
                        {match.result && (
                          <div class="match-result">
                            <span class="winner">
                              勝者: {
                                teams.find(t => Object.keys(teamsData.teams).find(
                                  key => teamsData.teams[key].name === t.name && key === match.result!.winner
                                ))?.name || match.result.winner
                              }
                            </span>
                            <span class="score">{match.result.score}</span>
                          </div>
                        )}
                        
                        {match.status === 'scheduled' && (
                          <div class="match-status">予定</div>
                        )}
                      </div>
                    ))}
                  </div>
                </div>
              ))}
            </div>
          </div>

          <!-- Playoffs Schedule -->
          <div class="schedule-phase playoffs">
            <h3 class="phase-title">プレイオフ</h3>
            <div class="playoffs-info">
              <p class="playoffs-format">形式: {matchesData.playoffs.format}</p>
              <p class="playoffs-location">開催: {matchesData.playoffs.location}</p>
            </div>
            <div class="playoffs-grid">
              {matchesData.playoffs.schedule.map((playoffDay) => (
                <div class="playoff-day-card">
                  <header class="playoff-day-header">
                    <h4 class="playoff-date">
                      {new Date(playoffDay.date).toLocaleDateString('ja-JP', { 
                        month: 'long', 
                        day: 'numeric' 
                      })}（{playoffDay.day}）
                    </h4>
                    <span class="playoff-description">{playoffDay.description}</span>
                  </header>
                  
                  <div class="playoff-matches">
                    {playoffDay.matches.map((match) => (
                      <div class="playoff-match">
                        <span class="playoff-round">{match.round}</span>
                        <div class="playoff-teams">
                          <span class="team">{match.team1}</span>
                          <span class="vs">vs</span>
                          <span class="team">{match.team2}</span>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- Standings Section -->
    <section id="standings" class="standings-section">
      <div class="container">
        <header class="section-header">
          <h2 class="section-title">現在の順位</h2>
          <p class="section-description">
            COREとNEXT部門別の現在の順位表
          </p>
        </header>

        <div class="standings-container">
          <StandingsTable 
            standings={coreStandings} 
            division="CORE"
          />
          
          <StandingsTable 
            standings={nextStandings} 
            division="NEXT"
          />
        </div>
      </div>
    </section>
  </main>

  <Footer />
</Layout>

<style>
  /* Hero Section */
  .hero {
    margin-top: 100px;
    padding: var(--space-16) 0;
    background: 
      linear-gradient(rgba(0, 0, 0, 0.7), rgba(0, 0, 0, 0.5)),
      radial-gradient(circle at 30% 70%, rgba(200, 155, 60, 0.1) 0%, transparent 50%),
      linear-gradient(135deg, var(--color-background) 0%, var(--color-surface) 100%);
    position: relative;
    overflow: hidden;
  }

  .hero::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-image: 
      url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grid" width="10" height="10" patternUnits="userSpaceOnUse"><path d="M 10 0 L 0 0 0 10" fill="none" stroke="%23c89b3c" stroke-width="0.3" opacity="0.1"/></pattern></defs><rect width="100" height="100" fill="url(%23grid)"/></svg>');
    opacity: 0.3;
  }

  .hero-content {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 var(--space-5);
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: var(--space-12);
    align-items: center;
    position: relative;
    z-index: 1;
  }

  .hero-text {
    text-align: left;
  }

  .hero-title {
    font-size: clamp(2.5rem, 5vw, 4rem);
    font-weight: 700;
    color: var(--color-text-light);
    margin-bottom: var(--space-4);
    line-height: 1.1;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
  }

  .hero-subtitle {
    font-size: var(--font-size-xl);
    color: var(--color-primary);
    margin-bottom: var(--space-2);
    font-weight: 500;
  }

  .hero-season {
    font-size: var(--font-size-lg);
    color: var(--color-text);
    margin-bottom: var(--space-3);
    font-weight: 400;
  }

  .hero-support {
    font-size: var(--font-size-base);
    color: var(--color-text-secondary);
    font-weight: 400;
  }

  .tournament-overview {
    display: flex;
    flex-direction: column;
    gap: var(--space-8);
  }

  .overview-stats {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: var(--space-4);
  }

  .stat-card {
    background: rgba(12, 22, 44, 0.8);
    border: 2px solid var(--color-primary);
    border-radius: var(--radius-xl);
    padding: var(--space-6);
    text-align: center;
    transition: all var(--transition-normal);
  }

  .stat-card:hover {
    transform: translateY(-4px);
    box-shadow: var(--shadow-lg);
  }

  .stat-number {
    display: block;
    font-size: var(--font-size-4xl);
    font-weight: 700;
    color: var(--color-primary);
    line-height: 1;
    margin-bottom: var(--space-2);
  }

  .stat-label {
    font-size: var(--font-size-sm);
    color: var(--color-text-secondary);
    text-transform: uppercase;
    letter-spacing: 0.5px;
    font-weight: 500;
  }

  .tournament-dates {
    background: rgba(12, 22, 44, 0.6);
    border: 1px solid var(--color-border);
    border-radius: var(--radius-xl);
    padding: var(--space-6);
    display: flex;
    flex-direction: column;
    gap: var(--space-4);
  }

  .date-info {
    display: flex;
    flex-direction: column;
    gap: var(--space-1);
  }

  .date-label {
    font-size: var(--font-size-sm);
    color: var(--color-primary);
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .date-range {
    font-size: var(--font-size-base);
    color: var(--color-text-light);
    font-weight: 500;
  }

  /* Section Styles */
  .teams-section,
  .schedule-section,
  .standings-section {
    padding: var(--space-16) 0;
  }

  .teams-section {
    background: rgba(12, 22, 44, 0.3);
  }

  .section-header {
    text-align: center;
    margin-bottom: var(--space-12);
  }

  .section-title {
    font-size: var(--font-size-3xl);
    color: var(--color-text-light);
    margin-bottom: var(--space-4);
    position: relative;
  }

  .section-title::after {
    content: '';
    position: absolute;
    bottom: -10px;
    left: 50%;
    transform: translateX(-50%);
    width: 80px;
    height: 3px;
    background: var(--color-primary);
  }

  .section-description {
    font-size: var(--font-size-lg);
    color: var(--color-text);
    max-width: 600px;
    margin: 0 auto;
  }

  .teams-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
    gap: var(--space-8);
  }

  /* Schedule Styles */
  .schedule-container {
    display: flex;
    flex-direction: column;
    gap: var(--space-12);
  }

  .schedule-phase {
    background: rgba(12, 22, 44, 0.6);
    border-radius: var(--radius-xl);
    padding: var(--space-8);
    border: 1px solid var(--color-border);
  }

  .phase-title {
    font-size: var(--font-size-2xl);
    color: var(--color-text-light);
    margin-bottom: var(--space-6);
    text-align: center;
    padding-bottom: var(--space-3);
    border-bottom: 2px solid var(--color-primary);
  }

  .schedule-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: var(--space-6);
  }

  .match-day-card {
    background: rgba(70, 55, 20, 0.4);
    border: 1px solid var(--color-border);
    border-radius: var(--radius-lg);
    padding: var(--space-4);
    transition: all var(--transition-normal);
  }

  .match-day-card:hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-md);
  }

  .match-day-header {
    text-align: center;
    margin-bottom: var(--space-4);
    padding-bottom: var(--space-3);
    border-bottom: 1px solid var(--color-border);
  }

  .match-date {
    font-size: var(--font-size-lg);
    color: var(--color-text-light);
    margin-bottom: var(--space-1);
  }

  .match-time {
    display: block;
    font-size: var(--font-size-sm);
    color: var(--color-primary);
    font-weight: 500;
    margin-bottom: var(--space-1);
  }

  .match-description {
    font-size: var(--font-size-sm);
    color: var(--color-text-secondary);
  }

  .matches-list {
    display: flex;
    flex-direction: column;
    gap: var(--space-2);
  }

  .match-item {
    background: rgba(12, 22, 44, 0.6);
    border-left: 4px solid var(--color-border);
    border-radius: var(--radius-md);
    padding: var(--space-3);
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .match-item.completed {
    border-left-color: var(--color-success);
  }

  .match-item.scheduled {
    border-left-color: var(--color-warning);
  }

  .match-division {
    font-size: var(--font-size-xs);
    color: var(--color-primary);
    font-weight: 600;
    background: rgba(200, 155, 60, 0.1);
    padding: var(--space-1) var(--space-2);
    border-radius: var(--radius-sm);
    margin-bottom: var(--space-2);
  }

  .match-teams {
    display: flex;
    align-items: center;
    gap: var(--space-2);
    font-size: var(--font-size-sm);
  }

  .team {
    color: var(--color-text-light);
    font-weight: 500;
  }

  .vs {
    color: var(--color-text-secondary);
    font-size: var(--font-size-xs);
  }

  .match-result {
    text-align: right;
    display: flex;
    flex-direction: column;
    gap: var(--space-1);
  }

  .winner {
    font-size: var(--font-size-xs);
    color: var(--color-success);
    font-weight: 600;
  }

  .score {
    font-size: var(--font-size-xs);
    color: var(--color-text-secondary);
  }

  .match-status {
    font-size: var(--font-size-xs);
    color: var(--color-warning);
    font-weight: 500;
  }

  /* Playoffs Styles */
  .playoffs {
    background: rgba(200, 155, 60, 0.05);
    border-color: var(--color-primary);
  }

  .playoffs-info {
    text-align: center;
    margin-bottom: var(--space-6);
    display: flex;
    justify-content: center;
    gap: var(--space-6);
  }

  .playoffs-format,
  .playoffs-location {
    font-size: var(--font-size-sm);
    color: var(--color-text);
    margin: 0;
  }

  .playoffs-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: var(--space-4);
  }

  .playoff-day-card {
    background: rgba(12, 22, 44, 0.8);
    border: 1px solid var(--color-primary);
    border-radius: var(--radius-lg);
    padding: var(--space-4);
  }

  .playoff-day-header {
    text-align: center;
    margin-bottom: var(--space-4);
    padding-bottom: var(--space-2);
    border-bottom: 1px solid var(--color-primary);
  }

  .playoff-date {
    font-size: var(--font-size-base);
    color: var(--color-text-light);
    margin-bottom: var(--space-1);
  }

  .playoff-description {
    font-size: var(--font-size-sm);
    color: var(--color-primary);
  }

  .playoff-matches {
    display: flex;
    flex-direction: column;
    gap: var(--space-3);
  }

  .playoff-match {
    background: rgba(70, 55, 20, 0.4);
    border-radius: var(--radius-md);
    padding: var(--space-3);
    text-align: center;
  }

  .playoff-round {
    display: block;
    font-size: var(--font-size-xs);
    color: var(--color-primary);
    font-weight: 600;
    margin-bottom: var(--space-2);
  }

  .playoff-teams {
    font-size: var(--font-size-sm);
    color: var(--color-text);
  }

  /* Standings Styles */
  .standings-container {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(450px, 1fr));
    gap: var(--space-8);
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    .hero-content {
      grid-template-columns: 1fr;
      gap: var(--space-8);
      text-align: center;
    }

    .hero-text {
      text-align: center;
    }

    .overview-stats {
      grid-template-columns: 1fr;
      gap: var(--space-3);
    }

    .teams-grid {
      grid-template-columns: 1fr;
      gap: var(--space-6);
    }

    .schedule-grid {
      grid-template-columns: 1fr;
    }

    .standings-container {
      grid-template-columns: 1fr;
      gap: var(--space-6);
    }

    .playoffs-info {
      flex-direction: column;
      gap: var(--space-2);
    }
  }

  @media (max-width: 480px) {
    .hero {
      margin-top: 80px;
      padding: var(--space-8) 0;
    }

    .hero-title {
      font-size: 2rem;
    }

    .stat-card {
      padding: var(--space-4);
    }

    .stat-number {
      font-size: var(--font-size-3xl);
    }

    .tournament-dates {
      padding: var(--space-4);
    }

    .match-teams {
      flex-direction: column;
      gap: var(--space-1);
      text-align: center;
    }

    .match-item {
      flex-direction: column;
      align-items: flex-start;
      gap: var(--space-2);
    }
  }
</style>