---
import Layout from '@/layouts/Layout.astro';
import Header from '@/components/Header.astro';
import Footer from '@/components/Footer.astro';
import VideoGrid from '@/components/VideoGrid.astro';
import { readFileSync } from 'fs';
import { join } from 'path';

// SEO meta for clips page
const pageTitle = `LTK 切り抜き動画 | League The k4sen ハイライト集`;
const pageDescription = `League The k4sen(LTK)の名シーン・ハイライト動画を集約。ショート動画と長編切り抜きを分けて見やすく整理。プロストリーマーたちの神プレイ・面白シーンをまとめて視聴。`;
const pageKeywords = [
  'LTK',
  'League The k4sen',
  '切り抜き',
  'クリップ',
  'ハイライト',
  'YouTube',
  'ショート動画',
  'League of Legends',
  'LoL',
  'ストリーマー',
  'k4sen',
  'か4せん',
  'ZETA DIVISION',
  'プロゲーマー',
  '神プレイ',
  '面白シーン',
  'eスポーツ',
  'ゲーミング',
  '配信',
  '動画',
  'clips',
  'highlights',
  'gaming videos',
  'esports clips'
];

// Load video data from static files
let videoData;
let customVideoData;
let lastUpdated = 'データ未取得';
let totalCount = 0;

try {
  // Read main video data
  const videosPath = join(process.cwd(), 'src/data/ltk-videos.json');
  const rawVideoData = readFileSync(videosPath, 'utf-8');
  videoData = JSON.parse(rawVideoData);
  
  // Read custom videos
  const customVideosPath = join(process.cwd(), 'src/data/ltk-custom-videos.json');
  const rawCustomData = readFileSync(customVideosPath, 'utf-8');
  customVideoData = JSON.parse(rawCustomData);
  
  // Get metadata
  lastUpdated = videoData.last_updated ? new Date(videoData.last_updated).toLocaleString('ja-JP') : 'データ未取得';
  totalCount = (videoData.regular_videos?.length || 0) + (videoData.shorts?.length || 0) + (customVideoData.custom_videos?.filter((v: any) => v.isVisible)?.length || 0);
} catch (error) {
  console.error('Error loading video data:', error);
  videoData = { regular_videos: [], shorts: [] };
  customVideoData = { custom_videos: [] };
}

// Combine all videos for display
const allRegularVideos = [
  ...(videoData.regular_videos || []),
  ...(customVideoData.custom_videos?.filter((v: any) => v.isVisible && !v.isShort) || [])
];

const allShorts = [
  ...(videoData.shorts || []),
  ...(customVideoData.custom_videos?.filter((v: any) => v.isVisible && v.isShort) || [])
];

// Sort by published date (newest first)
allRegularVideos.sort((a, b) => new Date(b.publishedAt).getTime() - new Date(a.publishedAt).getTime());
allShorts.sort((a, b) => new Date(b.publishedAt).getTime() - new Date(a.publishedAt).getTime());

const videoCollection = {
  regular_videos: allRegularVideos,
  shorts: allShorts
};

// Structured data for SEO (simplified for now)
const structuredData = {
  "@context": "https://schema.org",
  "@type": "CollectionPage",
  "name": "LTK 切り抜き動画",
  "description": pageDescription,
  "url": "https://ltk-sbb.shiai.games/clips"
};
---

<Layout
  title={pageTitle}
  description={pageDescription}
  keywords={pageKeywords}
>
  <!-- Structured Data for SEO - temporarily disabled -->
  <!-- <script type="application/ld+json" set:html={JSON.stringify(structuredData)} slot="head"></script> -->
  <Header />

  <main>
    <!-- Hero Section -->
    <section class="mt-20 py-16 bg-gradient-to-br from-primary to-secondary">
      <div class="max-w-6xl mx-auto px-5 text-center">
        <h1 class="text-4xl md:text-5xl font-bold text-dark mb-4 leading-tight font-display">
          LTK 切り抜き動画
        </h1>
        <p class="text-xl text-dark-light mb-6 font-medium">
          League The k4sen の名シーン・ハイライト集
        </p>
        <p class="text-lg text-dark mb-3 font-normal max-w-3xl mx-auto">
          プロストリーマーたちの神プレイから面白シーンまで、LTKの魅力的な瞬間をまとめて視聴できます
        </p>
        
        <!-- Stats -->
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mt-8 max-w-2xl mx-auto">
          <div class="bg-surface border border-tertiary rounded-lg p-4 text-center">
            <span class="block text-2xl font-bold text-accent mb-1">{videoCollection.regular_videos.length}</span>
            <span class="text-sm text-dark-light uppercase tracking-wide">通常動画</span>
          </div>
          <div class="bg-surface border border-tertiary rounded-lg p-4 text-center">
            <span class="block text-2xl font-bold text-accent mb-1">{videoCollection.shorts.length}</span>
            <span class="text-sm text-dark-light uppercase tracking-wide">ショート動画</span>
          </div>
          <div class="bg-surface border border-tertiary rounded-lg p-4 text-center">
            <span class="block text-2xl font-bold text-accent mb-1">{totalCount}</span>
            <span class="text-sm text-dark-light uppercase tracking-wide">総動画数</span>
          </div>
        </div>
        
        <!-- Last Updated Info -->
        <div class="mt-6 text-center">
          <p class="text-sm text-dark-light">
            最終更新: {lastUpdated}
          </p>
        </div>
      </div>
    </section>

    <!-- Filter Section -->
    <section class="py-8 bg-primary border-b border-tertiary">
      <div class="max-w-6xl mx-auto px-5">
        <div class="flex flex-col md:flex-row gap-4 items-center justify-between">
          <!-- Video Type Toggle -->
          <div class="flex bg-surface border border-tertiary rounded-lg p-1" role="tablist">
            <button 
              class="px-4 py-2 rounded-md font-medium transition-all duration-150 bg-gold text-dark"
              role="tab"
              aria-selected="true"
              data-filter="all"
            >
              すべて
            </button>
            <button 
              class="px-4 py-2 rounded-md font-medium transition-all duration-150 text-dark-light hover:text-dark hover:bg-gold/20"
              role="tab"
              aria-selected="false"
              data-filter="regular"
            >
              通常動画
            </button>
            <button 
              class="px-4 py-2 rounded-md font-medium transition-all duration-150 text-dark-light hover:text-dark hover:bg-gold/20"
              role="tab"
              aria-selected="false"
              data-filter="shorts"
            >
              ショート動画
            </button>
          </div>

          <!-- Search Box -->
          <div class="relative">
            <input
              type="text"
              placeholder="動画を検索..."
              class="w-full md:w-80 px-4 py-2 pl-10 bg-surface border border-tertiary rounded-lg text-dark placeholder-dark-light focus:border-accent focus:outline-none"
              data-search-input
            />
            <svg class="absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-dark-light" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
            </svg>
          </div>
        </div>
      </div>
    </section>

    <!-- Video Grid Sections -->
    {videoCollection.regular_videos.length > 0 ? (
      <VideoGrid 
        videos={videoCollection.regular_videos}
        variant="regular"
        title="通常動画"
        description="LTKの詳細なハイライトと解説動画"
        showLoadMore={true}
        maxInitialItems={9}
      />
    ) : (
      <section class="py-16 bg-secondary">
        <div class="max-w-6xl mx-auto px-5 text-center">
          <div class="bg-surface border border-tertiary rounded-lg p-8 max-w-md mx-auto">
            <svg class="w-16 h-16 text-dark-light mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 4V2a1 1 0 011-1h8a1 1 0 011 1v2m-9 0v16l4-4 4 4V4M7 4h10"/>
            </svg>
            <h3 class="text-lg font-semibold text-dark mb-2">通常動画が見つかりません</h3>
            <p class="text-dark-light text-sm">
              LTKの通常動画がまだありません。<br/>
              YouTube APIからデータを取得してください。
            </p>
          </div>
        </div>
      </section>
    )}

    {videoCollection.shorts.length > 0 ? (
      <VideoGrid 
        videos={videoCollection.shorts}
        variant="short"
        title="ショート動画"
        description="LTKの短時間ハイライト動画"
        showLoadMore={true}
        maxInitialItems={12}
      />
    ) : (
      <section class="py-16 bg-primary">
        <div class="max-w-6xl mx-auto px-5 text-center">
          <div class="bg-surface border border-tertiary rounded-lg p-8 max-w-md mx-auto">
            <svg class="w-16 h-16 text-dark-light mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"/>
            </svg>
            <h3 class="text-lg font-semibold text-dark mb-2">ショート動画が見つかりません</h3>
            <p class="text-dark-light text-sm">
              LTKのショート動画がまだありません。<br/>
              YouTube APIからデータを取得してください。
            </p>
          </div>
        </div>
      </section>
    )}
  </main>

  <Footer />
</Layout>

<script>
  // Enhanced filter functionality for video sections
  const filterButtons = document.querySelectorAll('[data-filter]');
  const searchInput = document.querySelector('[data-search-input]') as HTMLInputElement;

  // Filter button handling with improved UX
  filterButtons.forEach(button => {
    button.addEventListener('click', () => {
      const filter = button.getAttribute('data-filter');
      if (filter) {
        setActiveFilter(filter, filterButtons);
        applyFilter(filter);
      }
    });
  });

  // Enhanced search functionality
  if (searchInput) {
    let searchTimeout: number;
    
    searchInput.addEventListener('input', () => {
      clearTimeout(searchTimeout);
      searchTimeout = setTimeout(() => {
        const query = searchInput.value.toLowerCase().trim();
        applySearch(query);
      }, 300); // Debounce search
    });
  }

  function setActiveFilter(filter: string, buttons: NodeListOf<Element>) {
    buttons.forEach(btn => {
      const isActive = btn.getAttribute('data-filter') === filter;
      btn.classList.toggle('bg-gold', isActive);
      btn.classList.toggle('text-dark', isActive);
      btn.classList.toggle('text-dark-light', !isActive);
      btn.setAttribute('aria-selected', isActive.toString());
    });
  }

  function applyFilter(filter: string) {
    const regularSection = document.getElementById('regular-videos-section');
    const shortsSection = document.getElementById('short-videos-section');

    if (!regularSection || !shortsSection) return;

    // Smooth transitions
    const sections = [regularSection, shortsSection];
    sections.forEach(section => {
      section.style.transition = 'opacity 0.3s ease-in-out';
    });

    switch (filter) {
      case 'regular':
        regularSection.style.display = 'block';
        shortsSection.style.display = 'none';
        break;
      case 'shorts':
        regularSection.style.display = 'none';
        shortsSection.style.display = 'block';
        break;
      case 'all':
      default:
        regularSection.style.display = 'block';
        shortsSection.style.display = 'block';
        break;
    }

    // Update URL hash for bookmarking
    const hash = filter === 'all' ? '' : `#${filter}`;
    if (window.location.hash !== hash) {
      window.history.replaceState(null, '', window.location.pathname + hash);
    }
  }

  function applySearch(query: string) {
    const allVideoCards = document.querySelectorAll('[data-video-grid] .video-card-regular, [data-video-grid] .video-card-short');
    let visibleCount = 0;
    
    allVideoCards.forEach(card => {
      const title = card.querySelector('h3')?.textContent?.toLowerCase() || '';
      const channel = card.querySelector('.font-medium')?.textContent?.toLowerCase() || '';
      const description = card.getAttribute('data-description')?.toLowerCase() || '';
      
      const matches = !query || title.includes(query) || channel.includes(query) || description.includes(query);
      
      (card as HTMLElement).style.display = matches ? 'block' : 'none';
      if (matches) visibleCount++;
    });

    // Show/hide no results message
    updateSearchResults(visibleCount, query);
  }

  function updateSearchResults(count: number, query: string) {
    let noResultsEl = document.getElementById('no-search-results');
    
    if (count === 0 && query) {
      if (!noResultsEl) {
        noResultsEl = document.createElement('div');
        noResultsEl.id = 'no-search-results';
        noResultsEl.className = 'text-center py-8';
        noResultsEl.innerHTML = `
          <div class="bg-surface border border-tertiary rounded-lg p-6 max-w-md mx-auto">
            <svg class="w-12 h-12 text-dark-light mx-auto mb-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
            </svg>
            <h3 class="text-lg font-semibold text-dark mb-2">検索結果が見つかりません</h3>
            <p class="text-dark-light text-sm">「<span class="font-medium">${query}</span>」に一致する動画はありません。</p>
          </div>
        `;
        
        const filterSection = document.querySelector('section:has([data-search-input])');
        if (filterSection) {
          filterSection.insertAdjacentElement('afterend', noResultsEl);
        }
      }
      noResultsEl.style.display = 'block';
    } else if (noResultsEl) {
      noResultsEl.style.display = 'none';
    }
  }

  // Apply filter from URL hash on page load
  window.addEventListener('DOMContentLoaded', () => {
    const hash = window.location.hash.substring(1);
    if (hash && ['regular', 'shorts'].includes(hash)) {
      const targetButton = document.querySelector(`[data-filter="${hash}"]`);
      if (targetButton) {
        (targetButton as HTMLElement).click();
      }
    }
  });

  // Keyboard shortcuts for better UX
  document.addEventListener('keydown', (e) => {
    // Focus search on '/' key
    if (e.key === '/' && !e.ctrlKey && !e.metaKey && searchInput) {
      e.preventDefault();
      searchInput.focus();
    }
    
    // Clear search on Escape
    if (e.key === 'Escape' && searchInput && document.activeElement === searchInput) {
      searchInput.value = '';
      applySearch('');
    }
  });
</script>

<style>
  /* Line clamp utility */
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  /* Smooth transitions for filter changes */
  #regular-videos,
  #shorts-videos {
    transition: opacity 0.3s ease-in-out;
  }

  /* Custom scrollbar for search input */
  input[data-search-input]:focus {
    box-shadow: 0 0 0 3px rgba(212, 175, 55, 0.1);
  }

  /* Responsive grid adjustments */
  @media (max-width: 768px) {
    [data-video-grid="shorts"] {
      grid-template-columns: repeat(2, 1fr);
      gap: 0.75rem;
    }
    
    [data-video-grid="regular"] {
      grid-template-columns: repeat(1, 1fr);
    }
  }

  @media (max-width: 480px) {
    .grid.grid-cols-1.md\\:grid-cols-3 {
      grid-template-columns: repeat(1, 1fr);
      gap: 0.75rem;
    }
  }
</style>