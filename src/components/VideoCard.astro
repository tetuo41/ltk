---
import type { YouTubeVideo } from '@/utils/youtubeApi';

export interface Props {
  video: YouTubeVideo;
  variant?: 'regular' | 'short';
}

const { video, variant = video.isShort ? 'short' : 'regular' } = Astro.props;

// Format view count for display
function formatViewCount(count: number): string {
  if (count >= 1000000) {
    return `${Math.floor(count / 100000) / 10}M`;
  } else if (count >= 1000) {
    return `${Math.floor(count / 100) / 10}K`;
  }
  return count.toString();
}

// Format published date
function formatPublishedDate(dateString: string): string {
  const date = new Date(dateString);
  const now = new Date();
  const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000);
  
  if (diffInSeconds < 60) return 'Êï∞ÁßíÂâç';
  if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)}ÂàÜÂâç`;
  if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)}ÊôÇÈñìÂâç`;
  if (diffInSeconds < 2592000) return `${Math.floor(diffInSeconds / 86400)}Êó•Ââç`;
  if (diffInSeconds < 31536000) return `${Math.floor(diffInSeconds / 2592000)}„É∂ÊúàÂâç`;
  return `${Math.floor(diffInSeconds / 31536000)}Âπ¥Ââç`;
}

// Truncate title based on variant
function truncateTitle(title: string, maxLength: number): string {
  return title.length > maxLength ? title.substring(0, maxLength) + '...' : title;
}

const isShort = variant === 'short';
const aspectRatio = isShort ? 'aspect-[9/16]' : 'aspect-video';
const titleMaxLength = isShort ? 60 : 80;
---

<div 
  class={`bg-surface border border-tertiary rounded-lg overflow-hidden transition-all duration-300 hover:border-accent-light hover:shadow-lg group ${isShort ? 'video-card-short' : 'video-card-regular'}`}
  data-video-id={video.id}
  data-video-type={variant}
  data-published-at={video.publishedAt}
  data-view-count={video.viewCount}
>
  <!-- Thumbnail Container -->
  <div class={`relative ${aspectRatio} bg-gray-200 overflow-hidden`}>
    <!-- Thumbnail Image -->
    <img 
      src={video.thumbnail} 
      alt={video.title}
      class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
      loading="lazy"
      decoding="async"
    />
    
    <!-- Duration Badge -->
    <div class={`absolute bottom-2 right-2 bg-black/80 text-white px-${isShort ? '1.5' : '2'} py-1 rounded text-xs font-medium`}>
      {video.duration}
    </div>
    
    <!-- Shorts Indicator (only for shorts) -->
    {isShort && (
      <div class="absolute top-2 left-2 bg-black/80 text-white px-2 py-1 rounded text-xs font-medium">
        Shorts
      </div>
    )}
    
    <!-- Play Button Overlay -->
    <div class="absolute inset-0 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity duration-300 bg-black/20">
      <div class={`${isShort ? 'w-12 h-12' : 'w-16 h-16'} bg-white/20 backdrop-blur-sm rounded-full flex items-center justify-center hover:bg-white/30 transition-colors cursor-pointer`}>
        <svg class={`${isShort ? 'w-4 h-4 ml-0.5' : 'w-6 h-6 ml-1'} text-white`} fill="currentColor" viewBox="0 0 24 24">
          <path d="M8 5v14l11-7z"/>
        </svg>
      </div>
    </div>
    
    <!-- View Count Overlay (for shorts) -->
    {isShort && (
      <div class="absolute bottom-2 left-2 bg-black/80 text-white px-2 py-1 rounded text-xs font-medium">
        üëÅÔ∏è {formatViewCount(video.viewCount)}
      </div>
    )}
  </div>
  
  <!-- Content Section -->
  <div class={`${isShort ? 'p-3' : 'p-4'}`}>
    <!-- Title -->
    <h3 class={`${isShort ? 'text-sm' : 'text-base'} font-semibold text-dark mb-2 line-clamp-2 group-hover:text-accent transition-colors leading-tight`}>
      {truncateTitle(video.title, titleMaxLength)}
    </h3>
    
    <!-- Channel Info -->
    <div class={`flex items-center justify-between ${isShort ? 'text-xs' : 'text-sm'} text-dark-light mb-2`}>
      <span class="font-medium truncate flex-1 mr-2">{video.channelName}</span>
      {!isShort && (
        <span class="whitespace-nowrap">{formatPublishedDate(video.publishedAt)}</span>
      )}
    </div>
    
    <!-- Bottom Row -->
    <div class={`flex items-center justify-between ${isShort ? 'text-xs' : 'text-xs'} text-dark-light`}>
      {!isShort && (
        <span>{formatViewCount(video.viewCount)} ÂõûË¶ñËÅ¥</span>
      )}
      {isShort && (
        <span class="text-xs">{formatPublishedDate(video.publishedAt)}</span>
      )}
      
      <!-- Watch Link -->
      <a 
        href={video.url}
        target="_blank"
        rel="noopener noreferrer"
        class="text-accent hover:text-accent-light font-medium transition-colors ml-auto flex items-center gap-1"
        aria-label={`${video.title}„ÇíË¶ñËÅ¥„Åô„Çã`}
      >
        {isShort ? 'Ë¶ñËÅ¥' : 'Ë¶ñËÅ¥„Åô„Çã'}
        <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"/>
        </svg>
      </a>
    </div>
    
    <!-- Tags (for regular videos only) -->
    {!isShort && video.tags && video.tags.length > 0 && (
      <div class="mt-3 pt-3 border-t border-tertiary">
        <div class="flex flex-wrap gap-1">
          {video.tags.slice(0, 3).map(tag => (
            <span class="inline-block bg-gold/10 text-dark text-xs px-2 py-1 rounded-full">
              #{tag}
            </span>
          ))}
          {video.tags.length > 3 && (
            <span class="text-xs text-dark-light">+{video.tags.length - 3} more</span>
          )}
        </div>
      </div>
    )}
    
    <!-- Like Count (if available) -->
    {video.likeCount && video.likeCount > 0 && (
      <div class="mt-2 flex items-center gap-1 text-xs text-dark-light">
        <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 10h4.764a2 2 0 011.789 2.894l-3.5 7A2 2 0 0115.263 21h-4.017c-.163 0-.326-.02-.485-.06L7 20m7-10V8a2 2 0 00-2-2H4.222a2 2 0 00-1.879 1.379L2 8v12h4.222a2 2 0 001.879-1.379L8 18m6-8h.01M12 14h.01"/>
        </svg>
        <span>{formatViewCount(video.likeCount)}</span>
      </div>
    )}
  </div>
</div>

<style>
  /* Line clamp utility for title truncation */
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  /* Hover effects for video cards */
  .video-card-regular:hover {
    transform: translateY(-2px);
  }

  .video-card-short:hover {
    transform: translateY(-1px);
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .video-card-regular .line-clamp-2 {
      -webkit-line-clamp: 3;
    }
    
    .video-card-short h3 {
      font-size: 0.75rem;
    }
  }

  /* Focus states for accessibility */
  .video-card-regular:focus-within,
  .video-card-short:focus-within {
    outline: 2px solid var(--color-accent);
    outline-offset: 2px;
  }

  /* Thumbnail loading state */
  .video-card-regular img[loading="lazy"],
  .video-card-short img[loading="lazy"] {
    background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
    background-size: 200% 100%;
    animation: loading 1.5s infinite;
  }

  @keyframes loading {
    0% { background-position: 200% 0; }
    100% { background-position: -200% 0; }
  }

  /* Custom scrollbar for tags */
  .video-card-regular .flex-wrap {
    scrollbar-width: none;
    -ms-overflow-style: none;
  }

  .video-card-regular .flex-wrap::-webkit-scrollbar {
    display: none;
  }
</style>