---
import type { NavItem } from '@/types';

const navItems: NavItem[] = [
  { href: '#home', label: 'ホーム', active: true },
  { href: '#teams', label: 'チーム' },
  { href: '#schedule', label: 'スケジュール' },
  { href: '#standings', label: '順位表' }
];
---

<header class="fixed top-0 left-0 right-0 z-50 bg-primary/95 backdrop-blur-sm border-b-2 border-gold transition-all duration-300">
  <nav>
    <div class="max-w-6xl mx-auto flex justify-between items-center px-5 py-4">
      <div class="flex flex-col">
        <h1 class="text-silver text-2xl font-bold mb-1">League The k4sen</h1>
        <span class="text-gold text-sm font-normal">精霊の花祭り 幽明の境</span>
      </div>
      
      <ul class="hidden md:flex list-none gap-8 m-0 p-0" role="list">
        {navItems.map((item) => (
          <li class="relative">
            <a 
              href={item.href} 
              class={`block px-4 py-2 rounded-md font-medium transition-all duration-150 relative ${
                item.active 
                  ? 'text-silver bg-gold/20 after:absolute after:bottom-0 after:left-1/2 after:-translate-x-1/2 after:w-5 after:h-0.5 after:bg-gold' 
                  : 'text-gold/80 hover:text-silver hover:bg-gold/10 hover:-translate-y-0.5'
              }`}
              data-nav-link
            >
              {item.label}
            </a>
          </li>
        ))}
      </ul>
      
      <button class="md:hidden flex flex-col bg-transparent border-none cursor-pointer p-2 gap-1" aria-label="メニューを開く" data-mobile-toggle>
        <span class="hamburger-line w-6 h-0.5 bg-gold transition-all duration-150 origin-center"></span>
        <span class="hamburger-line w-6 h-0.5 bg-gold transition-all duration-150 origin-center"></span>
        <span class="hamburger-line w-6 h-0.5 bg-gold transition-all duration-150 origin-center"></span>
      </button>
    </div>
  </nav>
</header>

<script>
  // TypeScript for navigation functionality
  interface NavLinkElement extends HTMLElement {
    href: string;
  }

  class Navigation {
    private navLinks: NodeListOf<NavLinkElement>;
    private sections: NodeListOf<HTMLElement>;
    private mobileToggle: HTMLButtonElement | null;
    private navMenu: HTMLElement | null;
    private isMenuOpen = false;

    constructor() {
      this.navLinks = document.querySelectorAll('[data-nav-link]') as NodeListOf<NavLinkElement>;
      this.sections = document.querySelectorAll('section') as NodeListOf<HTMLElement>;
      this.mobileToggle = document.querySelector('[data-mobile-toggle]') as HTMLButtonElement;
      this.navMenu = document.querySelector('.nav-menu');
      
      this.init();
    }

    private init(): void {
      this.setupSmoothScroll();
      this.setupScrollSpy();
      this.setupMobileMenu();
    }

    private setupSmoothScroll(): void {
      this.navLinks.forEach(link => {
        link.addEventListener('click', (e: Event) => {
          e.preventDefault();
          const targetId = link.getAttribute('href');
          
          if (targetId && targetId.startsWith('#')) {
            const targetSection = document.querySelector(targetId) as HTMLElement;
            
            if (targetSection) {
              const offsetTop = targetSection.offsetTop - 100;
              window.scrollTo({
                top: offsetTop,
                behavior: 'smooth'
              });
            }

            // Update active state
            this.updateActiveLink(link);
            
            // Close mobile menu if open
            this.closeMobileMenu();
          }
        });
      });
    }

    private setupScrollSpy(): void {
      const observerOptions: IntersectionObserverInit = {
        root: null,
        rootMargin: '-20% 0px -70% 0px',
        threshold: 0
      };

      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const id = entry.target.getAttribute('id');
            if (id) {
              const correspondingNavLink = document.querySelector(`[href="#${id}"]`) as NavLinkElement;
              if (correspondingNavLink) {
                this.updateActiveLink(correspondingNavLink);
              }
            }
          }
        });
      }, observerOptions);

      this.sections.forEach(section => observer.observe(section));
    }

    private setupMobileMenu(): void {
      if (this.mobileToggle) {
        this.mobileToggle.addEventListener('click', () => {
          this.toggleMobileMenu();
        });
      }

      // Close menu when clicking outside
      document.addEventListener('click', (e: Event) => {
        const target = e.target as HTMLElement;
        if (this.isMenuOpen && !target.closest('.nav-container')) {
          this.closeMobileMenu();
        }
      });

      // Close menu on escape key
      document.addEventListener('keydown', (e: KeyboardEvent) => {
        if (e.key === 'Escape' && this.isMenuOpen) {
          this.closeMobileMenu();
        }
      });
    }

    private updateActiveLink(activeLink: NavLinkElement): void {
      this.navLinks.forEach(link => link.classList.remove('active'));
      activeLink.classList.add('active');
    }

    private toggleMobileMenu(): void {
      if (this.isMenuOpen) {
        this.closeMobileMenu();
      } else {
        this.openMobileMenu();
      }
    }

    private openMobileMenu(): void {
      this.isMenuOpen = true;
      this.navMenu?.classList.add('mobile-open');
      this.mobileToggle?.classList.add('open');
      this.mobileToggle?.setAttribute('aria-label', 'メニューを閉じる');
      document.body.style.overflow = 'hidden';
    }

    private closeMobileMenu(): void {
      this.isMenuOpen = false;
      this.navMenu?.classList.remove('mobile-open');
      this.mobileToggle?.classList.remove('open');
      this.mobileToggle?.setAttribute('aria-label', 'メニューを開く');
      document.body.style.overflow = '';
    }
  }

  // Initialize navigation when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new Navigation();
  });
</script>

<style>
  /* Mobile menu styles */
  .mobile-menu-toggle.open .hamburger-line:nth-child(1) {
    transform: rotate(45deg) translate(6px, 6px);
  }

  .mobile-menu-toggle.open .hamburger-line:nth-child(2) {
    opacity: 0;
  }

  .mobile-menu-toggle.open .hamburger-line:nth-child(3) {
    transform: rotate(-45deg) translate(6px, -6px);
  }

  /* Mobile menu overlay */
  @media (max-width: 768px) {
    .nav-menu {
      @apply fixed top-full left-0 right-0 bg-primary/95 backdrop-blur-sm flex-col gap-0 px-4 py-6 border-t border-gold/30 -translate-y-full opacity-0 invisible transition-all duration-300;
    }

    .nav-menu.mobile-open {
      @apply translate-y-0 opacity-100 visible;
    }

    .nav-menu li a {
      @apply px-4 py-4 border-b border-gold/30 text-center text-lg;
    }

    .nav-menu li:last-child a {
      @apply border-b-0;
    }
  }

  @media (max-width: 480px) {
    .nav-menu {
      @apply px-3 py-4;
    }
  }
</style>